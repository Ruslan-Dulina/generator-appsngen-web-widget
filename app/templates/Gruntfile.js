module.exports = function (grunt) {
    'use strict'; // make jshint happy with it

    var versionStringPlaceholder = '%%versionstring%%';
    var packageJson = grunt.file.readJSON('package.json');
    var versionString = packageJson.version + ' ' + packageJson.gitCommitHash + ' ' + packageJson.jenkinsBuildNumber;
    var credentials = {
        username: '',
        password: ''
    };

    if (grunt.file.exists('./credentials.json')) {
        credentials = grunt.file.readJSON('./credentials.json').user;
    }
    require('load-grunt-tasks')(grunt, {
        pattern: [
            'grunt-*',
            '!grunt-template-jasmine-istanbul'
        ]
    });
    grunt.loadNpmTasks('grunt-appsngen-widget-upload');

    // Project configuration.
    grunt.initConfig({
        meta: {
            src: 'src',
            tests: 'tests',
            out: 'dist',
            widgetName: grunt.file.readJSON('package.json').name
        },
        /* cleans output folder  */
        clean: {
            beforebuild: [
                '<%= meta.out %>/<%= meta.widgetName %>',
                '<%= meta.out %>/<%= meta.widgetName %>.zip',
                '<%= meta.out %>/temp'
            ],
            afterbuild: [
                '<%= meta.out %>/<%= meta.widgetName %>',
                '<%= meta.out %>/temp'
            ],
            beforetest: [
                '<%= meta.out %>/tests',
                '<%= meta.out %>/coverage'
            ],
            aftertest: [
                '.grunt'
            ],
            beforelint: [
                '<%= meta.out %>/lint'
            ],
            afterlint: []
        },
        /* insert bower scripts and styles into html (do it manually only when you have a strong reason for it)
         * if bower.json updated and you want to see how scripts are inserted just run grunt wiredep
         * for appsngen needs less support where added */
        wiredep: {
            html: {
                src: ['<%= meta.src %>/index.html']
            },
            options: {
                fileTypes: {
                    html: {
                        detect: {
                            less: /<link.*href=['"]([^'"]+)/gi
                        },
                        replace: {
                            less: '<link rel="stylesheet" href="{{filePath}}" />'
                        }
                    }
                }
            }
        },
        /* copies files which are used by widget 'as is'
         * and renders widget version string */
        copy: {
            'unchanged-files': {
                expand: true,
                src: [
                    'application.xml',
                    'images/**',
                    'fonts/**'
                ],
                dest: '<%= meta.out %>/<%= meta.widgetName %>',
                cwd: '<%= meta.src %>'
            },
            'html-version': {
                expand: true,
                src: [
                    'index.html'
                ],
                dest: '<%= meta.out %>/<%= meta.widgetName %>',
                cwd: '<%= meta.src %>',
                options: {
                    process: function (content) {
                        return content.replace(versionStringPlaceholder, versionString.trim());
                    }
                }
            }
        },
        /* used to add debug.js to generated by useminPrepare file */
        concat: {
            debug: {
                src: [
                    '<%= meta.src %>/js/debug.js',
                    '<%= meta.out %>/<%= meta.widgetName %>/js/widget.concat.js'
                ],
                dest: '<%= meta.out %>/<%= meta.widgetName %>/js/widget.concat.js'
            }
        },
        /* generates config for concat, cssmin and uglify tasks from html markup */
        useminPrepare: {
            html: '<%= meta.src %>/index.html',
            options: {
                dest: '<%= meta.out %>/<%= meta.widgetName %>',
                staging: '<%= meta.out %>/temp',
                flow: {
                    steps: {
                        'js': ['concat', 'uglifyjs'],
                        'css': ['concat', 'cssmin'],
                        'less': ['concat']
                    },
                    post: {}
                }
            }
        },
        useminPrepareDev: {
            html: '<%= meta.src %>/index.html',
            options: {
                dest: '<%= meta.out %>/<%= meta.widgetName %>',
                staging: '<%= meta.out %>/temp',
                flow: {
                    steps: {
                        'js': ['concat'],
                        'css': ['concat'],
                        'less': ['concat']
                    },
                    post: {}
                }
            }
        },
        /* replaces references in output html file */
        usemin: {
            html: '<%= meta.out %>/<%= meta.widgetName %>/index.html',
            options: {
                blockReplacements: {
                    less: function (block) {
                        return '<link rel="stylesheet" href="' + block.dest + '" />';
                    }
                }
            }
        },
        /* minifies widget html */
        htmlmin: {
            dist: {
                files: {
                    '<%= meta.out %>/<%= meta.widgetName %>/index.html': '<%= meta.out %>/<%= meta.widgetName %>/index.html'
                },
                options: {
                    removeComments: true,
                    collapseWhitespace: true
                }
            }
        },
        /* runs jasmine specs with coverage report */
        jasmine: {
            widget: {
                src: [
                    '<%= meta.src %>/js/greeting.js'
                ],
                options: {
                    vendor: [
                        '<%= meta.tests %>/mocks/greeting.ui.mock.js'
                    ],
                    specs: [
                        '<%= meta.tests %>/specs/greeting.spec.js'
                    ],
                    junit: {
                        path: '<%= meta.out %>/tests',
                        consolidate: false
                    },
                    keepRunner: false,
                    template: require('grunt-template-jasmine-istanbul'),
                    templateOptions: {
                        coverage: '<%= meta.out %>/coverage/coverage.json',
                        report: [
                            {
                                type: 'lcov',
                                options: {
                                    dir: '<%= meta.out %>/coverage'
                                }
                            },
                            {
                                type: 'text-summary'
                            }
                        ]
                    }
                }
            }
        },
        /* runs jshint over the widget scripts */
        jshint: {
            options: {
                force: true
            },
            toConsole: {
                src: ['src/**/*.js', 'tests/*.js']
            },
            toFile: {
                options: {
                    reporter: 'jslint',
                    reporterOutput: '<%= meta.out %>/lint/js/lint.xml'
                },
                src: [
                    '<%= meta.src %>/js/*.js'
                ]
            }
        },
        /* runs csslint over the widget styles */
        lesslint: {
            options: {
                failOnError: false,
                formatters: [
                    {
                        id: 'csslint-xml',
                        dest: '<%= meta.out %>/lint/styles/lint.xml'
                    }
                ]
            },
            src: [
                '<%= meta.src %>/styles/widget.less',
                '<%= meta.src %>/styles/widget.css'
            ]
        },
        /* runs dev task if some changes where made in widget source */
        watch: {
            dev: {
                files: ['<%= meta.src %>/**', 'Gruntfile.js'],
                tasks: ['dev'],
                options: {
                    debounceDelay: 1000
                }
            }
        },
        /* creates widget package */
        compress: {
            zip: {
                options: { archive: '<%= meta.out %>/<%= meta.widgetName %>.zip' },
                files: [
                    { expand: true, src: ['**/*'], cwd: '<%= meta.out %>/<%= meta.widgetName %>' }
                ]
            }
        },
        appsngen_widget_upload: {
            options: {
                username: credentials.username,
                password: credentials.password,
                serviceAddress: 'https://dev.appsngen.com',
                zipFilePath: '<%= meta.out %>/<%= meta.widgetName %>.zip',
                replaceIfExists:true,
                openInBrowserAfterUpload: true
            }
        }
    });

    // Default task (prod). Produces minified version
    grunt.registerTask('default', [
        'clean:beforebuild',
        'wiredep',
        'copy',
        'useminPrepare',
        'concat:generated',
        'cssmin:generated',
        'uglify:generated',
        'usemin',
        'htmlmin',
        'compress',
        'clean:afterbuild'
    ]);

    // dev task. The same as  prod but without minification.
    grunt.registerTask('dev', [
        'clean:beforebuild',
        'clean:beforelint',
        'wiredep',
        'copy',
        'useminPrepareDev',
        'concat:generated',
        'concat:debug',
        'usemin',
        'compress',
        'jshint',
        'lesslint',
        'clean:afterbuild',
        'clean:afterlint'
    ]);

    // dev-watch task. will run dev task each time developer changed something (useful for devbox).
    grunt.registerTask('dev-watch', [
        'watch'
    ]);

    grunt.registerTask('test', [
        'clean:beforetest',
        'jasmine',
        'clean:aftertest'
    ]);

    grunt.registerTask('lint', [
        'clean:beforelint',
        'jshint',
        'lesslint',
        'clean:afterlint'
    ]);

    grunt.registerTask('appsngen-widget-upload', [
        'appsngen_widget_upload'
    ]);

    /*
     this very function is added as a workaround for a very terrible issue
     https://github.com/yeoman/grunt-usemin/issues/255
     this issue means that there is no possibility to define separate flows for prod and dev tasks
     so we add task which will allow us to change the useminPrepare configuration on a fly
     */
    grunt.registerTask('useminPrepareDev', function () {
        var useminPrepareDevConfig = grunt.config('useminPrepareDev');
        grunt.config.set('useminPrepare', useminPrepareDevConfig);
        grunt.task.run('useminPrepare');
    });
};
